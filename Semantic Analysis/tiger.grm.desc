64 shift/reduce conflicts

error:  state 20: shift/reduce conflict (shift LBRACK, reduce by rule 70)
error:  state 62: shift/reduce conflict (shift FUNCTION, reduce by rule 25)
error:  state 65: shift/reduce conflict (shift TYPE, reduce by rule 23)
error:  state 93: shift/reduce conflict (shift OR, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift AND, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift GE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift GT, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift LE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift LT, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift NEQ, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift EQ, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift DIVIDE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift TIMES, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift MINUS, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift PLUS, reduce by rule 16)
error:  state 94: shift/reduce conflict (shift ELSE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift PLUS, reduce by rule 15)
error:  state 124: shift/reduce conflict (shift OR, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift AND, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift GE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift GT, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift LE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift LT, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift NEQ, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift EQ, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift DIVIDE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift TIMES, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift MINUS, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift PLUS, reduce by rule 14)
error:  state 125: shift/reduce conflict (shift OR, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift AND, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift GE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift GT, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift LE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift LT, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift NEQ, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift EQ, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift DIVIDE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift TIMES, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift MINUS, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift PLUS, reduce by rule 49)
error:  state 140: shift/reduce conflict (shift OR, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift AND, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift GE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift GT, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift LE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift LT, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift NEQ, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift EQ, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift DIVIDE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift TIMES, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift MINUS, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift PLUS, reduce by rule 17)

state 0:

	program : . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	program	goto 145
	exp	goto 9
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 1:

	exp : array_create .  (reduce by rule 12)



	.	reduce by rule 12


state 2:

	exp : record_create .  (reduce by rule 11)



	.	reduce by rule 11


state 3:

	exp : bool_exp .  (reduce by rule 10)



	.	reduce by rule 10


state 4:

	exp : comp_exp .  (reduce by rule 9)



	.	reduce by rule 9


state 5:

	exp : funcall .  (reduce by rule 7)



	.	reduce by rule 7


state 6:

	exp : arith_exp .  (reduce by rule 8)



	.	reduce by rule 8


state 7:

	exp : unitexp .  (reduce by rule 3)



	.	reduce by rule 3


state 8:

	exp : lvalue .  (reduce by rule 1)
	exp : lvalue . ASSIGN exp 
	lvalue : lvalue . LBRACK exp RBRACK 
	lvalue : lvalue . DOT ID 

	LBRACK	shift 23
	DOT	shift 22
	ASSIGN	shift 21


	.	reduce by rule 1


state 9:

	program : exp .  (reduce by rule 0)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 0


state 10:

	exp : NIL .  (reduce by rule 2)



	.	reduce by rule 2


state 11:

	exp : BREAK .  (reduce by rule 18)



	.	reduce by rule 18


state 12:

	exp : LET . decs IN expseq END 


	decs	goto 36

	.	reduce by rule 21


state 13:

	exp : FOR . ID ASSIGN exp TO exp DO exp 

	ID	shift 37


	.	error


state 14:

	exp : WHILE . exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 38
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 15:

	exp : IF . exp THEN exp ELSE exp 
	exp : IF . exp THEN exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 39
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 16:

	exp : MINUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 40
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 17:

	exp : LPAREN . expseq RPAREN 
	unitexp : LPAREN . RPAREN 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	RPAREN	shift 43
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 42
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1
	expseq	goto 41

	.	error


state 18:

	exp : STRING .  (reduce by rule 5)



	.	reduce by rule 5


state 19:

	exp : INT .  (reduce by rule 4)



	.	reduce by rule 4

error:  state 20: shift/reduce conflict (shift LBRACK, reduce by rule 70)

state 20:

	lvalue : ID .  (reduce by rule 70)
	lvalue : ID . LBRACK exp RBRACK 
	funcall : ID . LPAREN explist RPAREN 
	record_create : ID . LBRACE record_create_list RBRACE 
	array_create : ID . LBRACK exp RBRACK OF exp 

	LPAREN	shift 46
	LBRACK	shift 45
	LBRACE	shift 44


	.	reduce by rule 70


state 21:

	exp : lvalue ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 47
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 22:

	lvalue : lvalue DOT . ID 

	ID	shift 48


	.	error


state 23:

	lvalue : lvalue LBRACK . exp RBRACK 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 49
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 24:

	bool_exp : exp OR . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 50
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 25:

	bool_exp : exp AND . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 51
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 26:

	comp_exp : exp GE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 52
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 27:

	comp_exp : exp GT . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 53
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 28:

	comp_exp : exp LE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 54
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 29:

	comp_exp : exp LT . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 55
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 30:

	comp_exp : exp NEQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 56
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 31:

	comp_exp : exp EQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 57
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 32:

	arith_exp : exp DIVIDE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 58
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 33:

	arith_exp : exp TIMES . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 59
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 34:

	arith_exp : exp MINUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 60
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 35:

	arith_exp : exp PLUS . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 61
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 36:

	exp : LET decs . IN expseq END 
	decs : decs . dec 

	IN	shift 71
	FUNCTION	shift 70
	VAR	shift 69
	TYPE	shift 68

	dec	goto 67
	tydec	goto 66
	tydeclist	goto 65
	vardec	goto 64
	fundec	goto 63
	fundeclist	goto 62

	.	error


state 37:

	exp : FOR ID . ASSIGN exp TO exp DO exp 

	ASSIGN	shift 72


	.	error


state 38:

	exp : WHILE exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	DO	shift 73


	.	error


state 39:

	exp : IF exp . THEN exp ELSE exp 
	exp : IF exp . THEN exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	THEN	shift 74


	.	error


state 40:

	exp : MINUS exp .  (reduce by rule 6)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 6


state 41:

	exp : LPAREN expseq . RPAREN 
	expseq : expseq . SEMICOLON exp 

	SEMICOLON	shift 76
	RPAREN	shift 75


	.	error


state 42:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	expseq : exp .  (reduce by rule 50)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 50


state 43:

	unitexp : LPAREN RPAREN .  (reduce by rule 52)



	.	reduce by rule 52


state 44:

	record_create : ID LBRACE . record_create_list RBRACE 

	ID	shift 80

	record_create_list	goto 79
	record_create_list_nonempty	goto 78
	record_create_field	goto 77

	.	reduce by rule 44


state 45:

	lvalue : ID LBRACK . exp RBRACK 
	array_create : ID LBRACK . exp RBRACK OF exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 81
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 46:

	funcall : ID LPAREN . explist RPAREN 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 84
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1
	explist	goto 83
	explist_nonempty	goto 82

	.	reduce by rule 54


state 47:

	exp : lvalue ASSIGN exp .  (reduce by rule 13)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 13


state 48:

	lvalue : lvalue DOT ID .  (reduce by rule 73)



	.	reduce by rule 73


state 49:

	lvalue : lvalue LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	RBRACK	shift 85
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	error


state 50:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	bool_exp : exp OR exp .  (reduce by rule 69)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26


	.	reduce by rule 69


state 51:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp AND exp .  (reduce by rule 68)
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26


	.	reduce by rule 68


state 52:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	comp_exp : exp GE exp .  (reduce by rule 67)
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 67
	COMMA	reduce by rule 67
	SEMICOLON	reduce by rule 67
	RPAREN	reduce by rule 67
	RBRACK	reduce by rule 67
	RBRACE	reduce by rule 67
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 67
	OR	reduce by rule 67
	THEN	reduce by rule 67
	ELSE	reduce by rule 67
	TO	reduce by rule 67
	DO	reduce by rule 67
	IN	reduce by rule 67
	END	reduce by rule 67
	FUNCTION	reduce by rule 67
	VAR	reduce by rule 67
	TYPE	reduce by rule 67


	.	error


state 53:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp GT exp .  (reduce by rule 66)
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 66
	COMMA	reduce by rule 66
	SEMICOLON	reduce by rule 66
	RPAREN	reduce by rule 66
	RBRACK	reduce by rule 66
	RBRACE	reduce by rule 66
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 66
	OR	reduce by rule 66
	THEN	reduce by rule 66
	ELSE	reduce by rule 66
	TO	reduce by rule 66
	DO	reduce by rule 66
	IN	reduce by rule 66
	END	reduce by rule 66
	FUNCTION	reduce by rule 66
	VAR	reduce by rule 66
	TYPE	reduce by rule 66


	.	error


state 54:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp LE exp .  (reduce by rule 65)
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 65
	COMMA	reduce by rule 65
	SEMICOLON	reduce by rule 65
	RPAREN	reduce by rule 65
	RBRACK	reduce by rule 65
	RBRACE	reduce by rule 65
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 65
	OR	reduce by rule 65
	THEN	reduce by rule 65
	ELSE	reduce by rule 65
	TO	reduce by rule 65
	DO	reduce by rule 65
	IN	reduce by rule 65
	END	reduce by rule 65
	FUNCTION	reduce by rule 65
	VAR	reduce by rule 65
	TYPE	reduce by rule 65


	.	error


state 55:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp LT exp .  (reduce by rule 64)
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 64
	COMMA	reduce by rule 64
	SEMICOLON	reduce by rule 64
	RPAREN	reduce by rule 64
	RBRACK	reduce by rule 64
	RBRACE	reduce by rule 64
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 64
	OR	reduce by rule 64
	THEN	reduce by rule 64
	ELSE	reduce by rule 64
	TO	reduce by rule 64
	DO	reduce by rule 64
	IN	reduce by rule 64
	END	reduce by rule 64
	FUNCTION	reduce by rule 64
	VAR	reduce by rule 64
	TYPE	reduce by rule 64


	.	error


state 56:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp NEQ exp .  (reduce by rule 63)
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 63
	COMMA	reduce by rule 63
	SEMICOLON	reduce by rule 63
	RPAREN	reduce by rule 63
	RBRACK	reduce by rule 63
	RBRACE	reduce by rule 63
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 63
	OR	reduce by rule 63
	THEN	reduce by rule 63
	ELSE	reduce by rule 63
	TO	reduce by rule 63
	DO	reduce by rule 63
	IN	reduce by rule 63
	END	reduce by rule 63
	FUNCTION	reduce by rule 63
	VAR	reduce by rule 63
	TYPE	reduce by rule 63


	.	error


state 57:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp EQ exp .  (reduce by rule 62)
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	EOF	reduce by rule 62
	COMMA	reduce by rule 62
	SEMICOLON	reduce by rule 62
	RPAREN	reduce by rule 62
	RBRACK	reduce by rule 62
	RBRACE	reduce by rule 62
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	AND	reduce by rule 62
	OR	reduce by rule 62
	THEN	reduce by rule 62
	ELSE	reduce by rule 62
	TO	reduce by rule 62
	DO	reduce by rule 62
	IN	reduce by rule 62
	END	reduce by rule 62
	FUNCTION	reduce by rule 62
	VAR	reduce by rule 62
	TYPE	reduce by rule 62


	.	error


state 58:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	arith_exp : exp DIVIDE exp .  (reduce by rule 61)
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 61


state 59:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp TIMES exp .  (reduce by rule 60)
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 



	.	reduce by rule 60


state 60:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp MINUS exp .  (reduce by rule 59)
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	TIMES	shift 33
	DIVIDE	shift 32


	.	reduce by rule 59


state 61:

	arith_exp : exp . PLUS exp 
	arith_exp : exp PLUS exp .  (reduce by rule 58)
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	TIMES	shift 33
	DIVIDE	shift 32


	.	reduce by rule 58

error:  state 62: shift/reduce conflict (shift FUNCTION, reduce by rule 25)

state 62:

	dec : fundeclist .  (reduce by rule 25)
	fundeclist : fundeclist . fundec 

	FUNCTION	shift 70

	fundec	goto 86

	.	reduce by rule 25


state 63:

	fundeclist : fundec .  (reduce by rule 39)



	.	reduce by rule 39


state 64:

	dec : vardec .  (reduce by rule 24)



	.	reduce by rule 24

error:  state 65: shift/reduce conflict (shift TYPE, reduce by rule 23)

state 65:

	dec : tydeclist .  (reduce by rule 23)
	tydeclist : tydeclist . tydec 

	TYPE	shift 68

	tydec	goto 87

	.	reduce by rule 23


state 66:

	tydeclist : tydec .  (reduce by rule 26)



	.	reduce by rule 26


state 67:

	decs : decs dec .  (reduce by rule 22)



	.	reduce by rule 22


state 68:

	tydec : TYPE . ID EQ ty 

	ID	shift 88


	.	error


state 69:

	vardec : VAR . ID ASSIGN exp 
	vardec : VAR . ID COLON ID ASSIGN exp 

	ID	shift 89


	.	error


state 70:

	fundec : FUNCTION . ID LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp 

	ID	shift 90


	.	error


state 71:

	exp : LET decs IN . expseq END 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 42
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1
	expseq	goto 91

	.	error


state 72:

	exp : FOR ID ASSIGN . exp TO exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 92
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 73:

	exp : WHILE exp DO . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 93
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 74:

	exp : IF exp THEN . exp ELSE exp 
	exp : IF exp THEN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 94
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 75:

	exp : LPAREN expseq RPAREN .  (reduce by rule 20)



	.	reduce by rule 20


state 76:

	expseq : expseq SEMICOLON . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 95
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 77:

	record_create_list_nonempty : record_create_field .  (reduce by rule 46)



	.	reduce by rule 46


state 78:

	record_create_list : record_create_list_nonempty .  (reduce by rule 45)
	record_create_list_nonempty : record_create_list_nonempty . COMMA record_create_field 

	COMMA	shift 96


	.	reduce by rule 45


state 79:

	record_create : ID LBRACE record_create_list . RBRACE 

	RBRACE	shift 97


	.	error


state 80:

	record_create_field : ID . EQ exp 

	EQ	shift 98


	.	error


state 81:

	lvalue : ID LBRACK exp . RBRACK 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	array_create : ID LBRACK exp . RBRACK OF exp 

	RBRACK	shift 99
	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	error


state 82:

	explist : explist_nonempty .  (reduce by rule 55)



	.	reduce by rule 55


state 83:

	funcall : ID LPAREN explist . RPAREN 
	explist_nonempty : explist . COMMA exp 

	COMMA	shift 101
	RPAREN	shift 100


	.	error


state 84:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	explist_nonempty : exp .  (reduce by rule 56)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 56


state 85:

	lvalue : lvalue LBRACK exp RBRACK .  (reduce by rule 72)



	.	reduce by rule 72


state 86:

	fundeclist : fundeclist fundec .  (reduce by rule 40)



	.	reduce by rule 40


state 87:

	tydeclist : tydeclist tydec .  (reduce by rule 27)



	.	reduce by rule 27


state 88:

	tydec : TYPE ID . EQ ty 

	EQ	shift 102


	.	error


state 89:

	vardec : VAR ID . ASSIGN exp 
	vardec : VAR ID . COLON ID ASSIGN exp 

	COLON	shift 104
	ASSIGN	shift 103


	.	error


state 90:

	fundec : FUNCTION ID . LPAREN tyfields RPAREN EQ exp 
	fundec : FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp 

	LPAREN	shift 105


	.	error


state 91:

	exp : LET decs IN expseq . END 
	expseq : expseq . SEMICOLON exp 

	SEMICOLON	shift 76
	END	shift 106


	.	error


state 92:

	exp : FOR ID ASSIGN exp . TO exp DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	TO	shift 107


	.	error

error:  state 93: shift/reduce conflict (shift OR, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift AND, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift GE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift GT, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift LE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift LT, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift NEQ, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift EQ, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift DIVIDE, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift TIMES, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift MINUS, reduce by rule 16)
error:  state 93: shift/reduce conflict (shift PLUS, reduce by rule 16)

state 93:

	exp : WHILE exp DO exp .  (reduce by rule 16)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 16

error:  state 94: shift/reduce conflict (shift ELSE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift OR, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift AND, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift GE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift GT, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift LE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift LT, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift NEQ, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift EQ, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift DIVIDE, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift TIMES, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift MINUS, reduce by rule 15)
error:  state 94: shift/reduce conflict (shift PLUS, reduce by rule 15)

state 94:

	exp : IF exp THEN exp . ELSE exp 
	exp : IF exp THEN exp .  (reduce by rule 15)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	ELSE	shift 108


	.	reduce by rule 15


state 95:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	expseq : expseq SEMICOLON exp .  (reduce by rule 51)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 51


state 96:

	record_create_list_nonempty : record_create_list_nonempty COMMA . record_create_field 

	ID	shift 80

	record_create_field	goto 109

	.	error


state 97:

	record_create : ID LBRACE record_create_list RBRACE .  (reduce by rule 43)



	.	reduce by rule 43


state 98:

	record_create_field : ID EQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 110
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 99:

	lvalue : ID LBRACK exp RBRACK .  (reduce by rule 71)
	array_create : ID LBRACK exp RBRACK . OF exp 

	OF	shift 111


	.	reduce by rule 71


state 100:

	funcall : ID LPAREN explist RPAREN .  (reduce by rule 53)



	.	reduce by rule 53


state 101:

	explist_nonempty : explist COMMA . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 112
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 102:

	tydec : TYPE ID EQ . ty 

	ID	shift 116
	LBRACE	shift 115
	ARRAY	shift 114

	ty	goto 113

	.	error


state 103:

	vardec : VAR ID ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 117
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 104:

	vardec : VAR ID COLON . ID ASSIGN exp 

	ID	shift 118


	.	error


state 105:

	fundec : FUNCTION ID LPAREN . tyfields RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp 

	ID	shift 122

	tyfields	goto 121
	tyfields_nonempty	goto 120
	tyfield	goto 119

	.	reduce by rule 33


state 106:

	exp : LET decs IN expseq END .  (reduce by rule 19)



	.	reduce by rule 19


state 107:

	exp : FOR ID ASSIGN exp TO . exp DO exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 123
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 108:

	exp : IF exp THEN exp ELSE . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 124
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 109:

	record_create_list_nonempty : record_create_list_nonempty COMMA record_create_field .  (reduce by rule 47)



	.	reduce by rule 47


state 110:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	record_create_field : ID EQ exp .  (reduce by rule 48)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 48


state 111:

	array_create : ID LBRACK exp RBRACK OF . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 125
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 112:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	explist_nonempty : explist COMMA exp .  (reduce by rule 57)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 57


state 113:

	tydec : TYPE ID EQ ty .  (reduce by rule 28)



	.	reduce by rule 28


state 114:

	ty : ARRAY . OF ID 

	OF	shift 126


	.	error


state 115:

	ty : LBRACE . tyfields RBRACE 

	ID	shift 122

	tyfields	goto 127
	tyfields_nonempty	goto 120
	tyfield	goto 119

	.	reduce by rule 33


state 116:

	ty : ID .  (reduce by rule 29)



	.	reduce by rule 29


state 117:

	vardec : VAR ID ASSIGN exp .  (reduce by rule 37)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 37


state 118:

	vardec : VAR ID COLON ID . ASSIGN exp 

	ASSIGN	shift 128


	.	error


state 119:

	tyfields_nonempty : tyfield .  (reduce by rule 35)



	.	reduce by rule 35


state 120:

	tyfields : tyfields_nonempty .  (reduce by rule 34)



	.	reduce by rule 34


state 121:

	fundec : FUNCTION ID LPAREN tyfields . RPAREN EQ exp 
	fundec : FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp 
	tyfields_nonempty : tyfields . COMMA tyfield 

	COMMA	shift 130
	RPAREN	shift 129


	.	error


state 122:

	tyfield : ID . COLON ID 

	COLON	shift 131


	.	error


state 123:

	exp : FOR ID ASSIGN exp TO exp . DO exp 
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24
	DO	shift 132


	.	error

error:  state 124: shift/reduce conflict (shift OR, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift AND, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift GE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift GT, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift LE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift LT, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift NEQ, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift EQ, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift DIVIDE, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift TIMES, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift MINUS, reduce by rule 14)
error:  state 124: shift/reduce conflict (shift PLUS, reduce by rule 14)

state 124:

	exp : IF exp THEN exp ELSE exp .  (reduce by rule 14)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 14

error:  state 125: shift/reduce conflict (shift OR, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift AND, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift GE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift GT, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift LE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift LT, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift NEQ, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift EQ, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift DIVIDE, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift TIMES, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift MINUS, reduce by rule 49)
error:  state 125: shift/reduce conflict (shift PLUS, reduce by rule 49)

state 125:

	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 
	array_create : ID LBRACK exp RBRACK OF exp .  (reduce by rule 49)

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 49


state 126:

	ty : ARRAY OF . ID 

	ID	shift 133


	.	error


state 127:

	ty : LBRACE tyfields . RBRACE 
	tyfields_nonempty : tyfields . COMMA tyfield 

	COMMA	shift 130
	RBRACE	shift 134


	.	error


state 128:

	vardec : VAR ID COLON ID ASSIGN . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 135
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 129:

	fundec : FUNCTION ID LPAREN tyfields RPAREN . EQ exp 
	fundec : FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp 

	COLON	shift 137
	EQ	shift 136


	.	error


state 130:

	tyfields_nonempty : tyfields COMMA . tyfield 

	ID	shift 122

	tyfield	goto 138

	.	error


state 131:

	tyfield : ID COLON . ID 

	ID	shift 139


	.	error


state 132:

	exp : FOR ID ASSIGN exp TO exp DO . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 140
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 133:

	ty : ARRAY OF ID .  (reduce by rule 31)



	.	reduce by rule 31


state 134:

	ty : LBRACE tyfields RBRACE .  (reduce by rule 30)



	.	reduce by rule 30


state 135:

	vardec : VAR ID COLON ID ASSIGN exp .  (reduce by rule 38)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 38


state 136:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 141
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 137:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp 

	ID	shift 142


	.	error


state 138:

	tyfields_nonempty : tyfields COMMA tyfield .  (reduce by rule 36)



	.	reduce by rule 36


state 139:

	tyfield : ID COLON ID .  (reduce by rule 32)



	.	reduce by rule 32

error:  state 140: shift/reduce conflict (shift OR, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift AND, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift GE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift GT, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift LE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift LT, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift NEQ, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift EQ, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift DIVIDE, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift TIMES, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift MINUS, reduce by rule 17)
error:  state 140: shift/reduce conflict (shift PLUS, reduce by rule 17)

state 140:

	exp : FOR ID ASSIGN exp TO exp DO exp .  (reduce by rule 17)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 17


state 141:

	fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp .  (reduce by rule 41)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 41


state 142:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp 

	EQ	shift 143


	.	error


state 143:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp 

	ID	shift 20
	INT	shift 19
	STRING	shift 18
	LPAREN	shift 17
	MINUS	shift 16
	IF	shift 15
	WHILE	shift 14
	FOR	shift 13
	LET	shift 12
	BREAK	shift 11
	NIL	shift 10

	exp	goto 144
	lvalue	goto 8
	unitexp	goto 7
	arith_exp	goto 6
	funcall	goto 5
	comp_exp	goto 4
	bool_exp	goto 3
	record_create	goto 2
	array_create	goto 1

	.	error


state 144:

	fundec : FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .  (reduce by rule 42)
	arith_exp : exp . PLUS exp 
	arith_exp : exp . MINUS exp 
	arith_exp : exp . TIMES exp 
	arith_exp : exp . DIVIDE exp 
	comp_exp : exp . EQ exp 
	comp_exp : exp . NEQ exp 
	comp_exp : exp . LT exp 
	comp_exp : exp . LE exp 
	comp_exp : exp . GT exp 
	comp_exp : exp . GE exp 
	bool_exp : exp . AND exp 
	bool_exp : exp . OR exp 

	PLUS	shift 35
	MINUS	shift 34
	TIMES	shift 33
	DIVIDE	shift 32
	EQ	shift 31
	NEQ	shift 30
	LT	shift 29
	LE	shift 28
	GT	shift 27
	GE	shift 26
	AND	shift 25
	OR	shift 24


	.	reduce by rule 42


state 145:


	EOF	accept


	.	error

509 of 1019 action table entries left after compaction
350 goto table entries
